/* 연산자 */
// 연산자란?
// 하나 이상의 표현식을 대상으로 산술, 할당, 비교 , 논리 , 타입, 지수 연산 등을 수행하여 하나의 값을 만듦
// 이때 연산의 대상을 피연산자 라고 하고 피연산자는 값으로 평가될 수 있는 표현식 이어야한다.

/* 산술 연산자 */
// 산술 연산자는 피연산자를 대상으로 수학적 계산을 수행해 새로운 숫자 값을 만듦, 이때 산술연산이 불가능한경우 NaN(Not a Number)을 반환
// 이항 산술연산자의 종류
// + 덧셈
// - 뺄셈
// '*' 곱셈
// / 나눗셈
// % 나머지

// 산술 연산자를 통해 산술연산을 할 경우 피연산자의 값을 변경하는 부수효과가 없다. 항상 새로운 값을 만든다


/* 단항 산술연산자 */
//단항 산술연산자는 1개의 피연산자를 산술연산하여 숫자값을 만듦
//단항 산술연산자의 종류
// ++ 증가
// -- 감소
// + 효과없음(음수를 양수로 반전하지도 않는다)
// - 양수를 음수로, 음수를 양수로 반전한 값을 반환


// +(-10) => -10 으로 반환
// 숫자타입이 아닌 피연산자에 + 단항연산자를 사용할 경우 숫자타입으로 변환하여 반환한다.
// 값을 변경하는것이 아닌 숫자타입으로 변환한 값을 생성해서 반환한다.

var x = '1';
+x; // => 숫자형 1 로 변환
x = 'hello';
+x; // => 문자열을 숫자로 변환할 수 없기때문에 NaN 이 출력됨

/* 문자열 연결 연산자 */
// + 연산자는 피 연산자중 하나 이상의 값이 문자열일 경우 문자열 연결 연산자로 동작한다.
// '1' + 2 => 12
// 개발자의 의도와 상관없이 자바스크립트 엔진에 의해 암묵적으로 타입이 변경된다.
// 1 + true => 2 를 연산하면 true를 자바스크립트 엔진이 숫자타입 1로 강제변환 한 후 연산을 수행한다.
//이를 암묵적 타입변환 또는 타입 강제 변환 이라고 한다.

/* 할당 연산자 */
// 할당연산자는 우항에 있는 피연산자의 평가 결과를 좌항에 있는 변수에 할당한다.
// 할당연산자는 좌항의 변수의 값을 할당하므로 변수값이 변하는 부수효과가 있다

// = 할당연산자
// += -> 좌항 = 좌항 + 우항(피연산자)
// -= -> 좌항 = 좌항 - 우항(피연산자)
// '*'= -> 좌항 = 좌항 * 우항(피연산자)
// /= -> 좌항 = 좌항 / 우항(피연산자)
// &= -> 좌항 = 좌항 % 우항(피연산자)
// 할당문은 값으로 평가되는 표현식인 문으로서 할당된 값으로 평가된다


/* 비교 연산자 */
// 비교연산자는 좌항과 우항의 피연산자를 비교하여 불리언 값을 반환한다.

// == -> 값이 동등한지 비교
// === -> 값과 타입이 동등한지 비교
// '!=' -> 값이 다른지 비교
// '!==' -> 값과 타입이 다른지 비교

//== 동등비교 연산자는 좌항과 우항의 피연산자의 타입을 암묵적 타입변환을통해 타입을 일치시킨 후 값이 같은지 비교한다.
// === 일치비교 연산자는 좌항과 우항의 피연산자의 타입과 값을 비교 후 둘다 같은경우에만 true를 반환한다.

/* 삼항 조건 연산자 */
// 삼항 조건 연산자는 조건식의 평가결과에따라 값을 반환한다.
// 조건식 ? true : false
// 삼항 연산자는 값으로 평가할 수 있는 표현식인 문이다.

/* 논리연산자 */
// 논리연산자는 좌항과 우항의 피연산자(부정 논리 연산자의 경우 우항의 피연산자)를 논리 연산한다
// || 논리합
// && 논리곱
// '!' 부정연산자

/* 쉼표 연산자 */
// , 쉼표 연산자는 왼쪽 피연산자부터 차례대로 피연산자를 평가하고 마지막 피연산자의 평가가 끝나면 마지막 피연산자의 값의 평가를 반환한다
var x,y,z;
x = 1, y = 2, z = 3; // => 3

/* typeof 연산자 */
// typeof연산자는 피연산자의 데이터타입을 문자열 반환하고 7가지 데이터 타입 중 하나를 반환한다.

/* 지수 연산자 */
// 좌항의 피연산자를 밑으로, 우항의 피연산자를 지수로 거듭제곱하여 숫자값을 반환한다
2 ** 2; // 4

//지수연산자가 도입되기전에는 Math.pow 메서드를 사용했다.




