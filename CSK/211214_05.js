/* 표현식과 문 */
/* 값 */
// 값 이란?
// 표현식(expression)이 평가되어 생성된 결과
// 평가란 식을 해석해 값을 생성 혹은 참조하는것을 의미한다

//10 + 20 => 30
// 10+20 은 평가되어 숫자 값 30을 생성

//모든 값은 데이터 타입을 가짐
//변수는 하나의 값을 저장하기 위해 확보한 메모리공간 혹은 메모리공간을 식별하기위해 붙힌 이름이며 이 변수에 할당되는것이 바로 값이다

var sum = 10 + 20; // 30
//sum 이라는 변수에 할당되는것은 평가된 결과인 숫자 30이다
//다시말해 sum이라는 변수의 메모리에 저장된 것은 10+20이 아닌 30이다.
//따라서 10+20은 할당 이전에 평가되어 값을 생성해야한다.

/* 리터럴 */
//리터럴이란? 
// 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법
// 자바스크립트 엔진은 코드가 실행되는 런타임에 리터럴을 평가해서 값을 생성한다
// 즉 리터럴은 값을 생성하기 위해 미리 약속한 표기법이다.

/* 표현식 */
//표현식이란?
// 표현식(expression)은 값으로 평가될 수 있는 문(statement)
// 표현식이 평가되면 새로운 값을 생성 혹은 기존값을 참조한다

var score = 100; // 리터럴
var score2 = 50 + 50; // 연산
score; // 식별자 참조

//위의 예제 모두 표현식이다.
//다양한 표현식이 있지만 값으로 평가될 수 있는 문은 모두 표현식이다.

/* 문(statement) */

//문 이란?
// 문은 프로그램을 구성하는 기본단위자 최소 질행 단위다.
// 문은 여러 토큰(token)으로 구성된다
// 토큰(token)이란?
// 문법적인 의미를 가지며, 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소

var sum = 1 + 2;
//위의 연산을 토큰단위로 나누면 [var / sum / = / 1 / + / 2 / ;]