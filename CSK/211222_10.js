/* 객체 리터럴 */
// 객체란?
// 자바스크립트는 객체 기반의 언어이다
// 원시값(숫자,문자열,boolean,null,undefined,symbol)을 제외한 나머지 값들은 객체다
// 원시타입은 단 하나의 값만 갖을수있는 불변값이만
// 객체타입은 다양한 타입의 값을 그룹화 해서 사용할 수 있는 복합적인 자료구조다
// 원시값은 변경이 불가능한 불변값이지만, 객체값은 변경가능한 값이다


//객체는 0개 이상의 값(프로퍼티)로 구성된 집합이다.
//객체의 구성은 키와 값으로 나뉜다
var obj = {
  name : 'choi',
  age : '27'
}

//name:'choi', age:27 => 프로퍼티
// name, age => 키
// 'choi', 27 => 값

//객체의 프로퍼티는 두가지로 나뉜다
// 프로퍼티와 메서드 이다
// 프로퍼티는 객체 내부의 값을 의미하고
// 메서드는 프로퍼티를 참조하고 조작할수 있는 동작(함수)을 의미한다

/* 객체리터럴에 의한 객체 생성 */
// 인스턴스 => 클래스에 의해 생성되어 메모리에 저장된 실체
// 자바스크립트에서 객체를 생성하는 방법
// Object 생성자 함수 사용
// 객체 리터럴
// 생성자 함수
// Object.creat 메서드
// 클래스(ES6 지원)

// 변수가 할당되는 시점에 자바스크립트 엔진은 객체리터럴을 해석해 객체를 생성한다
var person = {
  name : 'Lee',
  sayHello : function() {
    console.log(`Hello My Name is ${this.name}`);
  }
};

console.log(typeof person);
console.log(person);

/* 프로퍼티 */
// 객체는 프로퍼티의 집합이며 프로퍼티는 키와 값으로 구분한다

var choi = {
  name : 'sungyu',
  age : 27
};

//프로퍼티를 구성하는 값
// 프로퍼티 키 => 빈 문자열을 포함한 모든 문자열 또는 심벌
// 프로퍼티 값 => 자바스크립트에서 사용할 수 있는 모든 값
// 프로퍼티 키는 프로퍼티 값에 접근할 수 있는 식별자 역할을한다
// 하지만 식별자 네이밍 규칙을 반드시 따르지 않아도 된다.
// 심벌값도 프로퍼티 키로 사용할 수 있지만 일반적으로는 문자열을 사용한다.
// 이때 프로퍼티 키는 문자열이므로 따옴표로 묶어야한다.
// 하지만 자바스크립트 네이밍 규칙을 준수할 경우는 따옴표를 생략할 수 있다

//프로퍼티 키에 문자열이나 심벌 값 외의 값을 사용하면 암묵적 타입변환을 통해 문자열이 된다.

/* 메서드 */
// 자바스크립트에서 사용가능한 값은 모두 프로퍼티 값으로 사용할 수 있다.
// 함수 역시 하나의 값으로 취급할 수 있기때문에 프로퍼티 값으로도 사용할 수 있다
// 객체 안에 프로퍼티값으로 존재하는 함수를 메서드 라고 한다

/* 프로퍼티 접근 */
// 프로퍼티에 접근하는 방법은 두가지다
// 마침표 프로퍼티 접근 연산자(.) 사용하는 마침표 표기법
// 대괄호 프로퍼티 접근 연산자([...])를 사용하는 대괄호 표기법
// 대괄포 프로퍼티 접근 연산자를 사용할때 대괄호 내부의 프로퍼티 키는 반드시 따옴표로 감싸는 문자열 이어야한다 그렇지 않으면 자바스크립트 엔진은 식별자로 해석해버린다.
// 객체에 존재하지 않는 프로퍼티에 접근하면 undefined를 반환한다.

/* 프로퍼티 축약 표현 */

//ES5
var x=1, y=2;
var obj = {
  x:x,
  y:y
}
console.log(obj); // => {x:1,y:2}

//ES6
//ES6에서는 프로퍼티 값으로 변수를 사용하는 경우 변수이름과 프로퍼티 키가 동일한 이름일때 프로퍼티키를 생략할수있고 프로퍼티키의 이름은 변수명과 동일하게 자동생성된다.
let a=1,b=2;

const obj2 = { a, b };
console.log(obj2); // => {a:1, b:2}

/* 계산된 프로퍼티 이름 */

//ES5

var prefix = 'prop';
var i = 0;

var obj = {};

obj[prefix + ' - ' + ++i] = i;
obj[prefix + ' - ' + ++i] = i;
obj[prefix + ' - ' + ++i] = i;

console.log(obj); // => {prefix-1:1, prefix-2:2, prefix-3: 3};

//ES6
//ES6에서는 객체 리터럴 내부에서도 계산된 프로퍼티 이름으로 프로퍼티 키를 동적 생성할 수 있다

const prefix2 = 'prop';
let y = 0;

const obj2 = {
  [`${prefix2}-${++y}`]: y,
  [`${prefix2}-${++y}`]: y,
  [`${prefix2}-${++y}`]: y,
};

console.log(obj2); // {prefix-1:1, prefix-2:2, prefix-3: 3};

/* 메서드 축약표현 */
//ES6

const obj = {
  name : 'choi',
  say() {
    console.log(`hi ${this.name}`);
  }
}

console.log(obj.say()); // => hi choi


