/* 전역변수의 문제점 */
// 전역변수를 무분별하게 사용할 경우 코드가 오염이된다
// 전역변수는 꼭 필요한 경우에만 사용한다

/* 지역변수의 생명주기 */
// 변수의 생명주기는 해당 변수의 스코프에 따라 결정된다
// 일반적인 var 키워드를 사용 시 함수 레벨 스코프를 갖기때문에 지역 변수의 생명주기는 해당 함수의 생명주기와 동일하다

var x = 10;

function foo() {
  var x = 100;
  console.log(x);
  return x;
}

foo();
console.log(x); // => 10

// 위의 예제로 foo에 선언된 변수 x의 생명주기는 함수 foo가 호출되고 종료되는 시점에 같이 종료된다
// 하지만 클로저와 같이 함수가 종료된 이후에도 생명주기가 끝나지않는 지역변수도 있다


var x = 'global';

function bar() {
  console.log(x);
  var x = 'local';
}

bar();
console.log(x); // => global

// 위의 예제에서 함수 bar 내부 콘솔에 찍히는 값은 undefined 이다
// 변수 호이스팅을 생각해보면 모든 변수가 런타임 이전에 선언이되고 할당만 되지않고있다
// 그렇다면 지역스코프를 가진 변수의 경우는 어떠할까
// 위의 예제로 보면 지역변수 스코프를 가진 변수는 지역변수 내에서 호이스팅이 일어나 함수 bar가 호출된 시점에 가장 첫줄로 끌어올려져 선언이 이루어진다
// 그렇기때문에 위의 예제는 undefined가 출력되는것이다.



/* 전역변수의 생명주기 */
// var 키워드로 생성된 전역변수는 전역객체(window)에 하위 프로퍼티가 된다
// 그렇다면 전역변수의 생명주기는 곧 전역객체의 생명주기와 같다
// window객체는 브라우저 자체로 이해하면 쉽다
// 그러면 전역변수의 생명주기는 브라우저가 닫히기 전까지 종료되지 않는다
