console.log('변수');

// 변수는 하나의 값을 저장하기 위한 수단(메커니즘)이다
var userId = 1;
var userName = 'Lee';

// 객체나 배열 같은 자료구조를 사용하면 여러개의 값을 하나의 변수에 저장할 수 있다.
var user = { id: 1, name: 'Lee' };
var users = [
    {id: 1, name: 'Lee'},
    {id: 2, name: 'Kim'}
];
// 정리 : 변수(식별자)는 값 자체를 저장하는게 아니라, 그 값이 저장되어 있는 메모리 주소를 저장하는 것이다(식별자와 메모리 주소는 매핑관계). 매핑정보도 메모리에 저장되어야 한다.
// 깊은 복사 - 자바스크립트는 기본 자료형의 값을 복사할 때 값을 완전히 복사한다. 따라서 새로운 변수의 값에 기존 변수를 할당해서 변경해도 기존 변수에 저장된 값을 변하지 않는다
var userNewId = userId;
userNewId = 3;
console.log(userId); //1
console.log(userNewId); //3

//얕은 복사 - 하지만 객체나 배열의 경우 = 기호만으로는 얕은 보갓 밖에 되지 않아 새로운 변수의 값에 기존 변수를 넣으면 값이 연결되어 변한다.
console.log(user); // { id: 1, name: 'Lee' }
var newUser = user; //newUser의 값에 user 객체를 할당한다.
newUser.id = 5; //newUser 객체의 id 키에 5라는 값을 할당한다.
console.log(user); // { id: 5, name: 'Lee' } //user 객체의 id 키 값도 5로 바뀌어 있다
console.log(newUser); //{ id: 5, name: 'Lee' }

//변수 선언을 하면, 변수 이름을 등록하고 값을 저장할 메모리 공간을 확보한다. 자바스크립트는 변수 선언을 하는 순간 그 메모리 공간안에 undefined라는 원시 타입의 값이 암묵적으로 할당되어 초기화 된다.
var cookie;
console.log(cookie); // undefined가 출력된다. 자바스크립트 코드는 인터프리터에 의해 한줄씩 순차적으로 실행되므로 쿠키라는 변수를 호출할 이 시점에는 변수에 값이 할당되어 있지 않기 대문에 초기값(undefined)이 호출된다
// 자바스크립트 엔진은 코드를 한줄식 실행하기 전에 모든 선언문을 먼저 실행한다. 선언문 실행 -> 소스코드를 한줄씩 실행 하므로 첫번째 콘솔에서 참조에러가 아닌 undefined가 출력되는 것이다.
// 변수 선언문은 런타임 이전에 실행되므로 변수선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 '호이스팅'이라고 한다. var, let, const, function 등 모든 선언문은 호이스팅 된다.
cookie = "쿠키는 맛있어";
console.log(cookie); //쿠키는 맛있어 가 출력된다.

// Todo 질문 : 페이지 44 그림4-8 이해 안감 (score라는 변수가 선언될때와 값이 할당됐을때 메모리 주소가 다르다?)
// 값을 재할당할때는 메모리 공간에 있던 내용을 삭제하고 넣는게 아니라, 아예 새로운 메모리 공간을 확보해서 저장한다. 기존에 있던 메모리 공간과 식별자는 연결이 해지되고 자바스크립트에 내장되어 있는 '가비지 콜렉터'에 의해 메모리에서 해제된다. (왜 새로 공간으 파서 넣을까??)

/* 자바스크립트 이름 규칙
* 변수나 함수: 카멜케이스(camelCase)
* 생성자 함수, 클래스: 파스칼케이스(PascalCase)
 */