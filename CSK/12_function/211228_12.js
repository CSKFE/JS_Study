/* 함수 */
// 함수란?
// 하나의 문(statement)를 코드 블록으로 감싸서 일련의 실행단위로 표현한 것
// 이때 전달받는 변수를 매개번수(parameter), 입력을 인수(argument), 출력을 반환(return value)라고 한다

/* 함수의 정의(선언 방법) */

// 함수
function add(x, y) {
  return x + y;
}

var result = add(2,5); // 함수 호출
// result => 7

// 함수를 사용하는 이유
// 여러번의 실행과정을 함수 하나로 정의하면 실행과정을 줄일 수 있다
// 이 과정중에 코드의 재사용성을 높이고 코드의 신뢰성, 유지보수의 편의성을 높힐 수 있다


//함수 리터럴
// 함수 리터럴은 function키워드, 함수 명, 매개변수, 코드블록(바디) 으로 구성 된다.
// 함수 리터럴도 하나의 값을 표현하기 위한 표기법이며, 평가되어 값을 생성하고 이 값은 객체다
// '*** 함수는 객체다 ***'
// 함수는 일반 객체와는 다르게 호출이 가능하다 그리고 객체에는 없는 함수 고유의 프로퍼티를 갖는다

var f = function add2(x, y) {
  return x+y;
};
//변수에 함수 리터럴을 할당

// 함수 리터럴의 구성

//함수 이름
// - 함수 이름은 곧 식별자(변수명과 같이 함수를 식별 할 수 있는 이름)이다 식별자 네이밍 규칙을 따라야 한다
// - 함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자 이다
// - 함수 이름은 생략이 가능하다. 이름이 있는 함수를 기명함수, 없는 함수를 익명함수 라고 한다

//매개변수 
// - 0개 이상의 매개변수를 소괄호로 감싸고 쉼표로 값을 구분한다
// - 각 매개변수는 함수 호출 시 순서대로 할당된다.
// - 매개변수는 함수의 몸체에서 변수와 동일하게 취급한다. 매개변수도 식별자 네이밍 규칙을 따라야한다

//함수 바디
// - 함수가 호출되었을때 실행할 문을 하나의 실행 단위로 정의한 코드 블록이다
// - 함수 몸체는 함수 호출에 의해 실행된다.


/* 함수 정의 */
// 함수 정의 방식

// 함수 선언문 (기명함수)
// 함수 선언문은 함수명을 생략할 수 없다
// 함수 선언문은 표현식이 아닌 '문(statement)' 이다
function plus(x, y) {
  return x + y;
}

// 함수 표현식 (익명함수)
var res = function calc(x ,y) {
  return x + y;
};

// Function 생성자 함수
var add3 = new Function('x','y', 'return x + y');

// arrow function(화살표 함수)
const add4 = (x, y) => x + y;




